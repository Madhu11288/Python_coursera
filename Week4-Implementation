# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
ball_pos=[WIDTH/2,HEIGHT/2]
ball_vel=[10,2]
paddle1_vel=1
paddle2_vel=1
score2=0
score1=0
score1_str="0"
score2_str="0"
paddle1_pos=[PAD_WIDTH / 2, HEIGHT / 2]
paddle2_pos=[WIDTH - PAD_WIDTH / 2, HEIGHT / 2]
time=0

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos=[WIDTH/2,HEIGHT/2]
    if direction == RIGHT :
        ball_vel[0]=random.randrange(2,4)
        ball_vel[1]=-random.randrange(2,4)
    if direction == LEFT :
        ball_vel[0]=-random.randrange(2,4)
        ball_vel[1]=-random.randrange(2,4)
def new_game():
    global paddle1_pos, paddle2_pos,paddle1_vel , paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    global score1_str,score2_str
    score1_str="0"
    score2_str="0"
    score1=0
    score2=0
    paddle1_vel=0
    paddle2_vel=0
    paddle1_pos = [PAD_WIDTH / 2, HEIGHT / 2]
    paddle2_pos = [WIDTH - PAD_WIDTH / 2, HEIGHT / 2]
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel,paddle1_vel,paddle2_vel
    global score1_str,score2_str 
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0]= ball_pos[0]+ball_vel[0]
    ball_pos[1]= ball_pos[1]+ball_vel[1]
    
            
    # draw ball
    canvas.draw_circle(ball_pos,BALL_RADIUS,2,"Red","White")
    
    #Bounce back the ball when it hits the left and right wall, top and bottom
    if(ball_pos[0]<=BALL_RADIUS):
        ball_vel[0]=-ball_vel[0]
    elif(ball_pos[0]>=(WIDTH-1)-BALL_RADIUS):
        ball_vel[0]=-ball_vel[0]
    elif(ball_pos[1]<=BALL_RADIUS):
        ball_vel[1]=-ball_vel[1]
    elif(ball_pos[1]>=(HEIGHT-1)-BALL_RADIUS):
        ball_vel[1]=-ball_vel[1] 
    
    # update paddle's vertical position, keep paddle on the screen
    if paddle1_pos[1] < HALF_PAD_HEIGHT:
         paddle1_pos[1] = HALF_PAD_HEIGHT
         paddle1_vel = 0
    elif paddle1_pos[1] > HEIGHT - HALF_PAD_HEIGHT:
       paddle1_pos[1] = HEIGHT - HALF_PAD_HEIGHT
       paddle1_vel = 0    
    if paddle2_pos[1] < HALF_PAD_HEIGHT:
        paddle2_pos[1] = HALF_PAD_HEIGHT
        paddle2_vel = 0
    elif paddle2_pos[1] > HEIGHT - HALF_PAD_HEIGHT:
       paddle2_pos[1] = HEIGHT - HALF_PAD_HEIGHT
       paddle2_vel = 0 
    
    paddle2_pos[1]+= paddle2_vel
    paddle1_pos[1]+= paddle1_vel 
 
    #collide the ball on the paddle and reflect it back
    if ball_pos[0] <= PAD_WIDTH + BALL_RADIUS:
        if ((paddle1_pos[1] - HALF_PAD_HEIGHT) <= ball_pos[1] <= (paddle1_pos[1] + HALF_PAD_HEIGHT) ):
            ball_vel[0]=ball_vel[0]*1.05
            print""
        else:
            score2 += 1
            score2_str = str(score2) 
            spawn_ball(RIGHT)
    if ball_pos[0] >= WIDTH - PAD_WIDTH - BALL_RADIUS:
        if ( paddle2_pos[1] - HALF_PAD_HEIGHT <= ball_pos[1] <= paddle2_pos[1] + HALF_PAD_HEIGHT ):
            ball_vel[0]=ball_vel[0]*1.05
            print""
        else:
            score1 += 1
            score1_str = str(score1) 
            spawn_ball(LEFT)
            
    ball_pos[0]= ball_pos[0]+ball_vel[0]
    ball_pos[1]= ball_pos[1]+ball_vel[1]
    
    # draw paddles
   # canvas.draw_polygon([[0, 0],[70, 0], [10, 0], [70, 10]], 1, 'Red')
    canvas.draw_line([paddle1_pos[0], paddle1_pos[1] - HALF_PAD_HEIGHT],[paddle1_pos[0], paddle1_pos[1] + HALF_PAD_HEIGHT],PAD_WIDTH,"White")
    canvas.draw_line([paddle2_pos[0], paddle2_pos[1] - HALF_PAD_HEIGHT],[paddle2_pos[0], paddle2_pos[1] + HALF_PAD_HEIGHT],PAD_WIDTH,"White")
    
    
    # draw scores
    
    canvas.draw_text(score1_str, (220, 80), 52, 'Red')
    canvas.draw_text(score2_str, (360, 80), 52, 'Red')
        
def keydown(key):
    global paddle1_vel, paddle2_vel,paddle1_pos,paddle2_pos
    momentum=3
    if(key==simplegui.KEY_MAP["down"]):
       paddle2_vel=momentum  
    if(key==simplegui.KEY_MAP["up"]):
       paddle2_vel= -momentum  
    if(key==simplegui.KEY_MAP["s"]):
       paddle1_vel=momentum
    if(key==simplegui.KEY_MAP["w"]):
       paddle1_vel=-momentum
   
def keyup(key):
    global paddle1_vel, paddle2_vel,paddle1_pos,paddle2_pos
    
    if(key==simplegui.KEY_MAP["up"]):
       paddle2_vel=0
    if(key==simplegui.KEY_MAP["down"]):
       paddle2_vel=0
    if(key==simplegui.KEY_MAP["w"]):
        paddle1_vel=0
    if(key==simplegui.KEY_MAP["s"]):
       paddle1_vel=0
        
def restart():
    new_game()
    


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.add_button("Restart",restart)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)


# start frame
new_game()
frame.start()
